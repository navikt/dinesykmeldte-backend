name: Build & Deploy
on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main
    types: [opened, synchronize, reopened, ready_for_review]
  workflow_dispatch:
permissions:
  actions: read
  contents: write
  security-events: write
  packages: write
  id-token: write
jobs:
  analyze:
    name: Analyze
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        language: [ 'kotlin' ]
    steps:
      - uses: actions/checkout@v4
      - uses: github/codeql-action/init@v3
        with:
          languages: kotlin
      - uses: navikt/teamesyfo-github-actions-workflows/actions/gradle-cached@main
      - run: ./gradlew shadowJar --no-build-cache -x test
        env:
          ORG_GRADLE_PROJECT_githubUser: x-access-token
          ORG_GRADLE_PROJECT_githubPassword: ${{ secrets.GITHUB_TOKEN }}
      - uses: github/codeql-action/analyze@v3
        with:
          category: "/language:kotlin"

  test:
    name: Test
    runs-on: ubuntu-latest
    steps:
      - uses: navikt/teamesyfo-github-actions-workflows/actions/gradle-cached@main
      - run: ./gradlew test
        env:
          ORG_GRADLE_PROJECT_githubUser: x-access-token
          ORG_GRADLE_PROJECT_githubPassword: ${{ secrets.GITHUB_TOKEN }}

  build:
    name: Build
    if: github.event.pull_request.draft == false
    runs-on: ubuntu-latest
    permissions:
      packages: write
      contents: write
      id-token: write
    outputs:
      image: ${{ steps.build-and-publish.outputs.image }}
    steps:
      - uses: navikt/teamesyfo-github-actions-workflows/actions/jar-to-docker@main
        id: build-and-publish
        with:
          app: ${{ inputs.app }}
          identity_provider: ${{ secrets.NAIS_WORKLOAD_IDENTITY_PROVIDER }}
          project_id: ${{ vars.NAIS_MANAGEMENT_PROJECT_ID }}
          github_token: ${{ secrets.GITHUB_TOKEN }}
          java-version: '21'

  deploy-dev:
    if: ${{ github.actor != 'dependabot[bot]' && github.event.pull_request.draft == false }}
    name: Deploy to dev
    runs-on: ubuntu-latest
    needs: [ test, build ]
    steps:
      - uses: actions/checkout@v4
      - uses: nais/deploy/actions/deploy@v2
        env:
          CLUSTER: dev-gcp
          RESOURCE: nais/nais-dev.yaml
          VAR: image=${{ needs.build.outputs.image }}

  deploy-prod:
    if: github.ref_name == 'main'
    name: Deploy to prod
    runs-on: ubuntu-latest
    needs: [ test, build ]
    steps:
      - uses: actions/checkout@v4
      - uses: nais/deploy/actions/deploy@v2
        env:
          CLUSTER: prod-gcp
          RESOURCE: nais/nais-prod.yaml
          VAR: image=${{ needs.build.outputs.image }}
